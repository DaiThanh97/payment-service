// source: slotsgames/scatter_prize.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.schema.AccumulateMultiplierScatterPrize', null, global);
goog.exportSymbol('proto.schema.ScatterPrizeModel', null, global);
goog.exportSymbol('proto.schema.ScatterPrizeModel.PrizeCase', null, global);
goog.exportSymbol('proto.schema.SimpleScatterPrize', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.ScatterPrizeModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.schema.ScatterPrizeModel.oneofGroups_);
};
goog.inherits(proto.schema.ScatterPrizeModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.ScatterPrizeModel.displayName = 'proto.schema.ScatterPrizeModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.SimpleScatterPrize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.SimpleScatterPrize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.SimpleScatterPrize.displayName = 'proto.schema.SimpleScatterPrize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AccumulateMultiplierScatterPrize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.AccumulateMultiplierScatterPrize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AccumulateMultiplierScatterPrize.displayName = 'proto.schema.AccumulateMultiplierScatterPrize';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.schema.ScatterPrizeModel.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.schema.ScatterPrizeModel.PrizeCase = {
  PRIZE_NOT_SET: 0,
  SIMPLE_SCATTER_PRIZE: 2,
  ACCUMULATE_MULTIPLIER_SCATTER_PRIZE: 3
};

/**
 * @return {proto.schema.ScatterPrizeModel.PrizeCase}
 */
proto.schema.ScatterPrizeModel.prototype.getPrizeCase = function() {
  return /** @type {proto.schema.ScatterPrizeModel.PrizeCase} */(jspb.Message.computeOneofCase(this, proto.schema.ScatterPrizeModel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.ScatterPrizeModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.ScatterPrizeModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.ScatterPrizeModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.ScatterPrizeModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    simpleScatterPrize: (f = msg.getSimpleScatterPrize()) && proto.schema.SimpleScatterPrize.toObject(includeInstance, f),
    accumulateMultiplierScatterPrize: (f = msg.getAccumulateMultiplierScatterPrize()) && proto.schema.AccumulateMultiplierScatterPrize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.ScatterPrizeModel}
 */
proto.schema.ScatterPrizeModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.ScatterPrizeModel;
  return proto.schema.ScatterPrizeModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.ScatterPrizeModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.ScatterPrizeModel}
 */
proto.schema.ScatterPrizeModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.schema.SimpleScatterPrize;
      reader.readMessage(value,proto.schema.SimpleScatterPrize.deserializeBinaryFromReader);
      msg.setSimpleScatterPrize(value);
      break;
    case 3:
      var value = new proto.schema.AccumulateMultiplierScatterPrize;
      reader.readMessage(value,proto.schema.AccumulateMultiplierScatterPrize.deserializeBinaryFromReader);
      msg.setAccumulateMultiplierScatterPrize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.ScatterPrizeModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.ScatterPrizeModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.ScatterPrizeModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.ScatterPrizeModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSimpleScatterPrize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.schema.SimpleScatterPrize.serializeBinaryToWriter
    );
  }
  f = message.getAccumulateMultiplierScatterPrize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.schema.AccumulateMultiplierScatterPrize.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.schema.ScatterPrizeModel.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.ScatterPrizeModel} returns this
 */
proto.schema.ScatterPrizeModel.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SimpleScatterPrize simple_scatter_prize = 2;
 * @return {?proto.schema.SimpleScatterPrize}
 */
proto.schema.ScatterPrizeModel.prototype.getSimpleScatterPrize = function() {
  return /** @type{?proto.schema.SimpleScatterPrize} */ (
    jspb.Message.getWrapperField(this, proto.schema.SimpleScatterPrize, 2));
};


/**
 * @param {?proto.schema.SimpleScatterPrize|undefined} value
 * @return {!proto.schema.ScatterPrizeModel} returns this
*/
proto.schema.ScatterPrizeModel.prototype.setSimpleScatterPrize = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.schema.ScatterPrizeModel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.schema.ScatterPrizeModel} returns this
 */
proto.schema.ScatterPrizeModel.prototype.clearSimpleScatterPrize = function() {
  return this.setSimpleScatterPrize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.schema.ScatterPrizeModel.prototype.hasSimpleScatterPrize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccumulateMultiplierScatterPrize accumulate_multiplier_scatter_prize = 3;
 * @return {?proto.schema.AccumulateMultiplierScatterPrize}
 */
proto.schema.ScatterPrizeModel.prototype.getAccumulateMultiplierScatterPrize = function() {
  return /** @type{?proto.schema.AccumulateMultiplierScatterPrize} */ (
    jspb.Message.getWrapperField(this, proto.schema.AccumulateMultiplierScatterPrize, 3));
};


/**
 * @param {?proto.schema.AccumulateMultiplierScatterPrize|undefined} value
 * @return {!proto.schema.ScatterPrizeModel} returns this
*/
proto.schema.ScatterPrizeModel.prototype.setAccumulateMultiplierScatterPrize = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.schema.ScatterPrizeModel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.schema.ScatterPrizeModel} returns this
 */
proto.schema.ScatterPrizeModel.prototype.clearAccumulateMultiplierScatterPrize = function() {
  return this.setAccumulateMultiplierScatterPrize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.schema.ScatterPrizeModel.prototype.hasAccumulateMultiplierScatterPrize = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.SimpleScatterPrize.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.SimpleScatterPrize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.SimpleScatterPrize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.SimpleScatterPrize.toObject = function(includeInstance, msg) {
  var f, obj = {
    freeSpins: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prize: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    freeSpinsMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    currentSpinMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.SimpleScatterPrize}
 */
proto.schema.SimpleScatterPrize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.SimpleScatterPrize;
  return proto.schema.SimpleScatterPrize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.SimpleScatterPrize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.SimpleScatterPrize}
 */
proto.schema.SimpleScatterPrize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreeSpins(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFreeSpinsMultiplier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentSpinMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.SimpleScatterPrize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.SimpleScatterPrize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.SimpleScatterPrize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.SimpleScatterPrize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFreeSpins();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPrize();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getFreeSpinsMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getCurrentSpinMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 free_spins = 1;
 * @return {number}
 */
proto.schema.SimpleScatterPrize.prototype.getFreeSpins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SimpleScatterPrize} returns this
 */
proto.schema.SimpleScatterPrize.prototype.setFreeSpins = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double prize = 2;
 * @return {number}
 */
proto.schema.SimpleScatterPrize.prototype.getPrize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SimpleScatterPrize} returns this
 */
proto.schema.SimpleScatterPrize.prototype.setPrize = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double free_spins_multiplier = 3;
 * @return {number}
 */
proto.schema.SimpleScatterPrize.prototype.getFreeSpinsMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SimpleScatterPrize} returns this
 */
proto.schema.SimpleScatterPrize.prototype.setFreeSpinsMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double current_spin_multiplier = 4;
 * @return {number}
 */
proto.schema.SimpleScatterPrize.prototype.getCurrentSpinMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SimpleScatterPrize} returns this
 */
proto.schema.SimpleScatterPrize.prototype.setCurrentSpinMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AccumulateMultiplierScatterPrize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AccumulateMultiplierScatterPrize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierScatterPrize.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialFreeSpins: jspb.Message.getFieldWithDefault(msg, 1, 0),
    initialFreeSpinMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    accumulatedFreeSpins: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accumulatedFreeSpinMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AccumulateMultiplierScatterPrize}
 */
proto.schema.AccumulateMultiplierScatterPrize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AccumulateMultiplierScatterPrize;
  return proto.schema.AccumulateMultiplierScatterPrize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AccumulateMultiplierScatterPrize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AccumulateMultiplierScatterPrize}
 */
proto.schema.AccumulateMultiplierScatterPrize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialFreeSpins(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitialFreeSpinMultiplier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccumulatedFreeSpins(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccumulatedFreeSpinMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AccumulateMultiplierScatterPrize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AccumulateMultiplierScatterPrize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierScatterPrize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialFreeSpins();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInitialFreeSpinMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAccumulatedFreeSpins();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAccumulatedFreeSpinMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 initial_free_spins = 1;
 * @return {number}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.getInitialFreeSpins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AccumulateMultiplierScatterPrize} returns this
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.setInitialFreeSpins = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double initial_free_spin_multiplier = 2;
 * @return {number}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.getInitialFreeSpinMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AccumulateMultiplierScatterPrize} returns this
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.setInitialFreeSpinMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 accumulated_free_spins = 3;
 * @return {number}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.getAccumulatedFreeSpins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AccumulateMultiplierScatterPrize} returns this
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.setAccumulatedFreeSpins = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double accumulated_free_spin_multiplier = 4;
 * @return {number}
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.getAccumulatedFreeSpinMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AccumulateMultiplierScatterPrize} returns this
 */
proto.schema.AccumulateMultiplierScatterPrize.prototype.setAccumulatedFreeSpinMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


goog.object.extend(exports, proto.schema);
