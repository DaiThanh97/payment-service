// source: slotsgames/accumulate_multiplier_slots_game.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.schema.AccumulateMultiplierSlotsGameModel', null, global);
goog.exportSymbol('proto.schema.AccumulateMultiplierSlotsGameSymbolModel', null, global);
goog.exportSymbol('proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest', null, global);
goog.exportSymbol('proto.schema.CreateAccumulateMultiplierSlotsGameRequest', null, global);
goog.exportSymbol('proto.schema.UpdateAccumulateMultiplierSlotsGameRequest', null, global);
goog.exportSymbol('proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AccumulateMultiplierSlotsGameModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.AccumulateMultiplierSlotsGameModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AccumulateMultiplierSlotsGameModel.displayName = 'proto.schema.AccumulateMultiplierSlotsGameModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.AccumulateMultiplierSlotsGameSymbolModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AccumulateMultiplierSlotsGameSymbolModel.displayName = 'proto.schema.AccumulateMultiplierSlotsGameSymbolModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.CreateAccumulateMultiplierSlotsGameRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.CreateAccumulateMultiplierSlotsGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.CreateAccumulateMultiplierSlotsGameRequest.displayName = 'proto.schema.CreateAccumulateMultiplierSlotsGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.UpdateAccumulateMultiplierSlotsGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.displayName = 'proto.schema.UpdateAccumulateMultiplierSlotsGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.displayName = 'proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.displayName = 'proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AccumulateMultiplierSlotsGameModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AccumulateMultiplierSlotsGameModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AccumulateMultiplierSlotsGameModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameModel}
 */
proto.schema.AccumulateMultiplierSlotsGameModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AccumulateMultiplierSlotsGameModel;
  return proto.schema.AccumulateMultiplierSlotsGameModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameModel}
 */
proto.schema.AccumulateMultiplierSlotsGameModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AccumulateMultiplierSlotsGameModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AccumulateMultiplierSlotsGameModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double max_multiplier = 1;
 * @return {number}
 */
proto.schema.AccumulateMultiplierSlotsGameModel.prototype.getMaxMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AccumulateMultiplierSlotsGameModel} returns this
 */
proto.schema.AccumulateMultiplierSlotsGameModel.prototype.setMaxMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AccumulateMultiplierSlotsGameSymbolModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AccumulateMultiplierSlotsGameSymbolModel;
  return proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AccumulateMultiplierSlotsGameSymbolModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.CreateAccumulateMultiplierSlotsGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availableGoldCoinsBetValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    availableSweepCoinsBetValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    rowCountsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    maxMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.CreateAccumulateMultiplierSlotsGameRequest;
  return proto.schema.CreateAccumulateMultiplierSlotsGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAvailableGoldCoinsBetValues(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAvailableSweepCoinsBetValues(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRowCounts(values[i]);
      }
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.CreateAccumulateMultiplierSlotsGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailableGoldCoinsBetValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getAvailableSweepCoinsBetValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getRowCountsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getMaxMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string game_name = 1;
 * @return {string}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.getGameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.setGameName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated double available_gold_coins_bet_values = 2;
 * @return {!Array<number>}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.getAvailableGoldCoinsBetValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.setAvailableGoldCoinsBetValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.addAvailableGoldCoinsBetValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.clearAvailableGoldCoinsBetValuesList = function() {
  return this.setAvailableGoldCoinsBetValuesList([]);
};


/**
 * repeated double available_sweep_coins_bet_values = 3;
 * @return {!Array<number>}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.getAvailableSweepCoinsBetValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.setAvailableSweepCoinsBetValuesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.addAvailableSweepCoinsBetValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.clearAvailableSweepCoinsBetValuesList = function() {
  return this.setAvailableSweepCoinsBetValuesList([]);
};


/**
 * repeated int32 row_counts = 4;
 * @return {!Array<number>}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.getRowCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.setRowCountsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.addRowCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.clearRowCountsList = function() {
  return this.setRowCountsList([]);
};


/**
 * optional double max_multiplier = 5;
 * @return {number}
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.getMaxMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.CreateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.CreateAccumulateMultiplierSlotsGameRequest.prototype.setMaxMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    availableGoldCoinsBetValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    availableSweepCoinsBetValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    rowCountsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    maxMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.UpdateAccumulateMultiplierSlotsGameRequest;
  return proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameName(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAvailableGoldCoinsBetValues(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAvailableSweepCoinsBetValues(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRowCounts(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvailableGoldCoinsBetValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getAvailableSweepCoinsBetValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getRowCountsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getMaxMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string game_name = 2;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getGameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setGameName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated double available_gold_coins_bet_values = 3;
 * @return {!Array<number>}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getAvailableGoldCoinsBetValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setAvailableGoldCoinsBetValuesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.addAvailableGoldCoinsBetValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.clearAvailableGoldCoinsBetValuesList = function() {
  return this.setAvailableGoldCoinsBetValuesList([]);
};


/**
 * repeated double available_sweep_coins_bet_values = 4;
 * @return {!Array<number>}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getAvailableSweepCoinsBetValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setAvailableSweepCoinsBetValuesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.addAvailableSweepCoinsBetValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.clearAvailableSweepCoinsBetValuesList = function() {
  return this.setAvailableSweepCoinsBetValuesList([]);
};


/**
 * repeated int32 row_counts = 5;
 * @return {!Array<number>}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getRowCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setRowCountsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.addRowCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.clearRowCountsList = function() {
  return this.setRowCountsList([]);
};


/**
 * optional double max_multiplier = 6;
 * @return {number}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.getMaxMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameRequest.prototype.setMaxMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest;
  return proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 minimum_payline_to_appear = 3;
 * @return {number}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 chance_ratio = 4;
 * @return {number}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_wild = 5;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_jackpot = 6;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_scatter = 7;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated double symbol_values = 8;
 * @return {!Array<number>}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest;
  return proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 minimum_payline_to_appear = 4;
 * @return {number}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 chance_ratio = 5;
 * @return {number}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_wild = 6;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_jackpot = 7;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool is_scatter = 8;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated double symbol_values = 9;
 * @return {!Array<number>}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};


goog.object.extend(exports, proto.schema);
